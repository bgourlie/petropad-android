package com.wbg.petropad;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TextView;
import android.widget.Toast;
import com.wbg.PetropadConstraintException;
import com.wbg.util.PMath;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

public class PetropadNewEntry extends Activity {
    public static final byte ENTRY_MODE_NEW = 0;
    public static final byte ENTRY_MODE_EDIT = 1;

    private TextView _lblEntryDate;
    private TextView _txtOdometerReading;
    private TextView _txtFillAmount;
    private TextView _txtPricePerUnit;
    private TextView _lblPricePerUnit;
    private TextView _lblFillAmount;
    private Button _btnSubmit;
    private Button _btnChangeDate;
    private Vehicle _vehicle;
    private Entry _entry;
    private byte _entryMode;
    private long _calendar_time;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.new_entry);
        Intent i = getIntent();
        _entryMode = i.getByteExtra("mode", ENTRY_MODE_NEW);
        int vehicle_index = i.getIntExtra("vehicle_index", -1);
        _vehicle = Petropad.vehicles.get(vehicle_index);

        int entry_id = i.getIntExtra("entry_id", -1);

        if (entry_id > -1) {
            _entry = _vehicle.getEntryById(entry_id);
        }

        _lblEntryDate = (TextView) findViewById(R.id.LblEntryDate);
        _txtOdometerReading = (TextView) findViewById(R.id.TxtOdometerReading);
        _btnChangeDate = (Button) findViewById(R.id.BtnChangeDate);
        _txtFillAmount = (TextView) findViewById(R.id.TxtFillAmount);
        _txtPricePerUnit = (TextView) findViewById(R.id.TxtPricePerUnit);
        _lblPricePerUnit = (TextView) findViewById(R.id.LblPricePerUnit);
        _lblFillAmount = (TextView) findViewById(R.id.LblFillAmount);
        _btnSubmit = (Button) findViewById(R.id.EntrySubmit);

        //i18n
        _lblPricePerUnit.setText(getString(R.string.label_price_per_unit, Units.getVolumeUnitSingular(Petropad.volume_unit_id)));
        _lblFillAmount.setText(getString(R.string.label_fill_amount, Units.getVolumeUnitPlural(Petropad.volume_unit_id)));
        _btnChangeDate.setOnClickListener(btnChangeDate_OnClick);
        _btnSubmit.setOnClickListener(btnSubmit_OnClick);
        initializeState();
    }

    private void initializeState() {
        switch (_entryMode) {
            case ENTRY_MODE_NEW:
                setTitle(getString(R.string.label_add_new_entry, _vehicle.name));
                _lblEntryDate.setText(R.string.label_entry_date_today);
                _calendar_time = System.currentTimeMillis();
                break;
            case ENTRY_MODE_EDIT:
                this.setTitle(getString(R.string.label_edit_entry, _vehicle.name));
                Calendar originalEntryTime = Calendar.getInstance();
                originalEntryTime.setTimeInMillis(_entry.timestamp);
                _calendar_time = _entry.timestamp;
                _lblEntryDate.setText(getString(R.string.label_entry_date, originalEntryTime));
                _txtOdometerReading.setText(String.valueOf(_entry.odometer_reading));
                _txtFillAmount.setText(PMath.formatToDecimalString(_entry.fill_amount, 3));
                _txtPricePerUnit.setText(PMath.formatToDecimalString(_entry.price_per_unit, 2));
                break;
        }
    }

    private View.OnClickListener btnSubmit_OnClick = new View.OnClickListener() {
        public void onClick(View v) {
            long current_time = System.currentTimeMillis();

            Context context = v.getContext();
            if (_calendar_time > current_time) {
                Toast.makeText(context, R.string.toast_entry_date_cannot_be_in_future, Toast.LENGTH_SHORT).show();
                return;
            }

            long timestamp;

            //if entry is null
            //  if the datepicker has todays date, then use the current_timestamp
            //  if it has a previous date, then use a timestamp generated by the pickers month-day-year
            if (_entry == null) {
                timestamp = current_time - _calendar_time < Statistics.MILLISECONDS_IN_DAY ? current_time : _calendar_time;
            }
            //else
            //  if the datepicker falls in the same day as the entries timestamp, use the entries timestamp
            //  if it does not fall in the same day, use a timestamp generated by the pickers month-day-year
            else {
                timestamp = _entry.timestamp - _calendar_time < Statistics.MILLISECONDS_IN_DAY ? _entry.timestamp : _calendar_time;
            }

            int odometer_reading;

            try {
                odometer_reading = Integer.parseInt(_txtOdometerReading.getText().toString());
            } catch (NumberFormatException ex) {
                Toast.makeText(v.getContext(), v.getContext().getString(R.string.toast_invalid_odometer_entry), Toast.LENGTH_LONG).show();
                return;
            }

            int fill_amount = PMath.normalizeNumber(_txtFillAmount.getText());
            int price_per_unit = PMath.normalizeNumber(_txtPricePerUnit.getText());

            try {
                validateFields(odometer_reading, fill_amount, price_per_unit);

                switch (_entryMode) {
                    case ENTRY_MODE_NEW:
                        createNew(odometer_reading, fill_amount, price_per_unit, timestamp);
                        break;
                    case ENTRY_MODE_EDIT:
                        updateExisting(odometer_reading, fill_amount, price_per_unit, timestamp);
                        break;
                }

            }
            catch (PetropadValidationException ex) {
                Toast.makeText(v.getContext(), ex.getLocalizedMessage(v.getContext()), Toast.LENGTH_LONG).show();
                return;
            }
            catch (PetropadConstraintException ex) {
                Toast.makeText(v.getContext(), v.getContext().getString(R.string.exception_unknown_error), Toast.LENGTH_LONG).show();
                return;
            }
        }
    };

    private View.OnClickListener btnChangeDate_OnClick = new View.OnClickListener() {
        public void onClick(View v) {

            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(_calendar_time);

            DatePickerDialog datePicker = new DatePickerDialog(v.getContext(), dateDielog_OnDateSet, cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH));
            datePicker.show();
        }
    };

    private DatePickerDialog.OnDateSetListener dateDielog_OnDateSet = new DatePickerDialog.OnDateSetListener() {

        public void onDateSet(DatePicker datePicker, int year, int month, int day) {
            GregorianCalendar cal = new GregorianCalendar(year, month, day);
            GregorianCalendar curDate = new GregorianCalendar();
            _calendar_time = cal.getTimeInMillis();

            if (cal.get(Calendar.YEAR) == curDate.get(Calendar.YEAR) && cal.get(Calendar.DAY_OF_YEAR) == curDate.get(Calendar.DAY_OF_YEAR)) {
                _lblEntryDate.setText(R.string.label_entry_date_today);
            } else {
                _lblEntryDate.setText(getString(R.string.label_entry_date, new Date(_calendar_time)));
            }

        }
    };

    private void createNew(int odometer_reading, int fill_amount, int price_per_unit, long timestamp) throws PetropadConstraintException {

        Entry entry = new Entry(_vehicle.id, odometer_reading, fill_amount, price_per_unit, timestamp);

        try {
            _vehicle.addEntry(entry);
        }
        catch (PetropadValidationException ex) {
            Toast.makeText(this, ex.getLocalizedMessage(this), Toast.LENGTH_LONG).show();
            return;
        }

        long entry_id;
        long odometer_reading_id;

        SQLiteDatabase db = Petropad.dbAdapter.getWritableDatabase();
        db.beginTransaction();
        try {
            SQLiteStatement odometer_reading_statement = db.compileStatement("INSERT INTO odometer_reading (vehicle_id, odometer_reading, timestamp) values (?,?,?)");
            odometer_reading_statement.bindLong(1, _vehicle.id);
            odometer_reading_statement.bindLong(2, odometer_reading);
            odometer_reading_statement.bindLong(3, timestamp);
            odometer_reading_id = odometer_reading_statement.executeInsert();

            SQLiteStatement entry_statement = db.compileStatement("INSERT INTO entry (odometer_reading_id, fill_amount, price_per_unit) values (?,?,?)");
            entry_statement.bindLong(1, odometer_reading_id);
            entry_statement.bindLong(2, fill_amount);
            entry_statement.bindLong(3, price_per_unit);

            entry_id = entry_statement.executeInsert();
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
            db.close();
        }

        entry.setId(entry_id);
        entry.setOdometerReadingId(odometer_reading_id);
        setResult(Petropad.RESULT_NEW_ENTRY);
        finish();
    }

    private void updateExisting(int odometer_reading, int fill_amount, int price_per_unit, long timestamp) throws PetropadConstraintException {
        Entry newEntry = new Entry(_entry.getId(), _entry.getOdometerReadingId(), _entry.vehicle_id, odometer_reading, fill_amount, price_per_unit, timestamp);

        try {
            _vehicle.replaceEntry(_entry, newEntry);
        }
        catch (PetropadValidationException ex) {
            Toast.makeText(this, ex.getLocalizedMessage(this), Toast.LENGTH_LONG).show();
            return;
        }

        SQLiteDatabase db = Petropad.dbAdapter.getWritableDatabase();
        db.beginTransaction();

        try {
            SQLiteStatement odometer_reading_statement = db.compileStatement("UPDATE odometer_reading SET odometer_reading = ?, timestamp = ? WHERE odometer_reading_id = ?");
            odometer_reading_statement.bindLong(1, odometer_reading);
            odometer_reading_statement.bindLong(2, timestamp);
            odometer_reading_statement.bindLong(3, _entry.getOdometerReadingId());

            SQLiteStatement statement = db.compileStatement("UPDATE entry SET fill_amount = ?, price_per_unit = ? WHERE entry_id = ?");
            statement.bindLong(1, fill_amount);
            statement.bindLong(2, price_per_unit);
            statement.bindLong(3, _entry.getId());
            statement.execute();
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
            db.close();
        }

        setResult(Petropad.RESULT_EDIT_ENTRY);
        db.close();
        finish();
    }

    public void validateFields(int odometer_reading, int fill_amount, int price_per_unit) throws PetropadValidationException {

        if (odometer_reading < 1) {
            throw new PetropadValidationException(R.string.toast_invalid_odometer_entry);
        }

        if (fill_amount < 1) {
            throw new PetropadValidationException(R.string.toast_invalid_fill_amount_entry);
        }

        if (price_per_unit < 0) {
            throw new PetropadValidationException(R.string.toast_invalid_price_per_entry);
        }
    }
}
